# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.4

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx4096m
      TERM: dumb
      #DEBUG: babel
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx4096m" -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.daemon=false'

    steps:
      - setup_remote_docker

      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      
      # Install Node for Front-end Build
      - run:
          name: Download Node
          command: curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash
      - run:
          name: Install Node
          command: sudo apt-get install -y nodejs
      - run:
          name: Install Npm
          command: curl -L https://npmjs.org/install.sh | sudo sh
      - run:
          name: Upgrade Yo
          command: sudo npm install -g yo@latest

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - restore_cache:
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - save_cache:
          paths:
            - ~/.npm
          key: v1-dependencies-{{ checksum "package-lock.json" }}

      - run: 
          name: clean
          command: ./gradlew clean --no-daemon
      - run: 
          name: npm install
          command: ./gradlew npm_install --no-daemon
      - run: 
          name: front-end tests
          command: ./gradlew npm_run_test --no-daemon
      - run:
          name: Sonarqube
          command: ./gradlew -Pprod check jacocoTestReport sonarqube --stacktrace --info
      - run: 
          name: package
          command: ./gradlew bootJar -x test -Pprod --no-daemon
      - run:
          name: Build Docker image
          command: |
            docker build -t $FULL_IMAGE_NAME . -f ./docker/Dockerfile
      - run:
          name: Save Docker image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image

  deploy:  
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME

workflows:
  version: 2

  dev-pipeline:
    jobs:
    - build:
        context: savantly-aws
    - deploy:
        context: savantly-aws
        requires:
        - build
