# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      # Install Node for Front-end Build
      - run:
          name: Download Node
          command: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash
      - run:
          name: Install Node
          command: sudo apt-get install -y nodejs
      - run:
          name: update-npm
          command: sudo npm install -g npm@latest

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run: 
          name: clean
          command: ./gradlew clean --no-daemon
      - run: 
          name: npm install
          command: ./gradlew npm_install -PnodeInstall --no-daemon
      #- run: 
      #    name: integration tests
      #    command: ./gradlew test integrationTest -PnodeInstall --no-daemon
      - run: 
          name: front-end tests
          command: ./gradlew npm_run_test -PnodeInstall --no-daemon
      - run: 
          name: package
          command: ./gradlew bootJar -x test -Pprod -PnodeInstall --no-daemon
      - run:
          name: build docker image
          command:  ./gradlew jib

      # run tests!
      #- run: ./gradlew test
      
      # build docker image
      #- run: ./gradlew bootJar -Pprod jibDockerBuild

workflows:
  version: 2

  dev-pipeline:
    jobs:
    - build
